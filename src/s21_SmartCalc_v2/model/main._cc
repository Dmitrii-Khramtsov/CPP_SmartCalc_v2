// #include <iostream>

// #include "polish_notation.h"

// int main() {
//   // Создаем объект класса ReversePolishNotation
//   s21::ReversePolishNotation rpn;

//   // // Тестовые случаи
//   // // std::string infix1 = "3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3";
//   std::string infix2 = "sin(5) + cos(2) - tan(3)";
//   // std::string infix3 = "sqrt(16) + ln(5) - log(10)";
//   // std::string infix4 = "10 / 5 + 3 * 2";
//   // std::string infix5 = "5 + 3 * 2";
//   std::string infix5 = "sin(cos(5 * 2))";
//   std::string infix6 = "(5 + 3) * (3 - 7) + 2 / 4";
//   std::string infix7 = "(5 + 3) * 2 / 4";
//   std::string infix8 = "(-5 + 3) * 2 / 4";
//   // std::string infix9 = "5 + 3 * 2 / 4 * sin(5) + cos(2) - 10 / tan(3)";
//   // std::string infix10 = "3 + 4 * 2 / 4 - 5  ^ 2 ^ 3";
//   std::string infix10 = "3+5*2-8/4";
//   std::string infix11 = "sin(90)+cos(0)";
//   std::string infix12 = "tan(45)+sin(30)*cos(60)-sqrt(9)/3";
//   std::string infix13 = "sin(cos(45)+tan(30))";
//   std::string infix14 = "2+3*4-5^6/tan(30)+7*8/9-10+asin(1)-acos(0)+atan(1)";
//   std::string infix15 = "2*3+4/5-6^7%8";
//   std::string infix16 = "2.5*3.1+4.6/5.7-6.8^7.9%8.2";
//   std::string infix17 = "1.340781e+154+10*2";
//   std::string infix18 = "5.3E3 + 2.7e-4 * 1.0E0 - 9.8E2 / 3.4e+2 + 3.4e0";
//   std::string infix19 = "2.7e-4+10*2";
//   std::string infix20 = "2.7e-4+10*x";
//   // std::string infix21 = "sin(90)+cos(0)";

//   // // Преобразование и вывод результатов
//   // // std::cout << "Infix: " << infix1 << "\nRPN: " << rpn.toRPN(infix1) <<
//   // std::endl;
//   std::cout << "Infix: " << infix2 << "\nRPN: " << rpn.toRPN(infix2)
//             << std::endl;
//   // std::cout << "Infix: " << infix3 << "\nRPN: " << rpn.toRPN(infix3) <<
//   // std::endl; std::cout << "Infix: " << infix4 << "\nRPN: " <<
//   // rpn.toRPN(infix4) << std::endl;
//   std::cout << "Infix: " << infix5 << "\nRPN: " << rpn.toRPN(infix5)
//             << std::endl;
//   std::cout << "Infix: " << infix6 << "\nRPN: " << rpn.toRPN(infix6)
//             << std::endl;
//   std::cout << "Infix: " << infix7 << "\nRPN: " << rpn.toRPN(infix7)
//             << std::endl;
//   std::cout << "Infix: " << infix8 << "\nRPN: " << rpn.toRPN(infix8)
//             << std::endl;
//   // std::cout << "Infix: " << infix9 << "\nRPN: " << rpn.toRPN(infix9) <<
//   // std::endl; std::cout << "Infix: " << infix10 << "\nRPN: " <<
//   // rpn.toRPN(infix10) << std::endl;
//   std::cout << "Infix: " << infix10 << "\nRPN: " << rpn.toRPN(infix10)
//             << "\nAWR: " << "3 5 2 * + 8 4 / - " << std::endl;
//   std::cout << "Infix: " << infix11 << "\nRPN: " << rpn.toRPN(infix11)
//             << "\nAWR: " << "90 s 0 c + " << std::endl;
//   std::cout << "Infix: " << infix12 << "\nRPN: " << rpn.toRPN(infix12)
//             << "\nAWR: " << "45 t 30 s 60 c * + 9 q 3 / - " << std::endl;
//   std::cout << "Infix: " << infix13 << "\nRPN: " << rpn.toRPN(infix13)
//             << "\nAWR: " << "45 c 30 t + s " << std::endl;
//   std::cout << "Infix: " << infix14 << "\nRPN: " << rpn.toRPN(infix14)
//             << "\nAWR: "
//             << "2 3 4 * + 5 6 ^ 30 t / - 7 8 * 9 / + 10 - 1 i + 0 o - 1 n + "
//             << std::endl;
//   std::cout << "Infix: " << infix15 << "\nRPN: " << rpn.toRPN(infix15)
//             << "\nAWR: " << "2 3 * 4 5 / + 6 7 ^ 8 % - " << std::endl;
//   std::cout << "Infix: " << infix16 << "\nRPN: " << rpn.toRPN(infix16)
//             << "\nAWR: " << "2.5 3.1 * 4.6 5.7 / + 6.8 7.9 ^ 8.2 % - "
//             << std::endl;
//   std::cout << "Infix: " << infix17 << "\nRPN: " << rpn.toRPN(infix17)
//             << "\nAWR: " << "1.340781e+154 10 2 * + " << std::endl;
//   std::cout << "Infix: " << infix18 << "\nRPN: " << rpn.toRPN(infix18)
//             << "\nAWR: " << "5.3E3 2.7e−4 1.0E0 * + 9.8E2 3.4e+2 / - 3.4e0 +"
//             << std::endl;
//   std::cout << "Infix: " << infix19 << "\nRPN: " << rpn.toRPN(infix19)
//             << "\nAWR: " << "2.7e−4 10 2 * + " << std::endl;

//   std::cout << "Infix: " << infix20 << "\nRPN: " << rpn.toRPN(infix20)
//             << "\nAWR: " << "2.7e−4 10 x * + " << std::endl;
//   // std::cout << "Infix: " << infix14 << "\nRPN: " << rpn.toRPN(infix14) <<
//   // "\nAWR: " << "2 3 * 4 5 / + 6 7 ^ 8 % - " << std::endl; std::cout <<
//   // "Infix: " << infix14 << "\nRPN: " << rpn.toRPN(infix14) << "\nAWR: " << "2
//   // 3 * 4 5 / + 6 7 ^ 8 % - " << std::endl; std::cout << "Infix: " << infix14
//   // << "\nRPN: " << rpn.toRPN(infix14) << "\nAWR: " << "2 3 * 4 5 / + 6 7 ^ 8 %
//   // - " << std::endl; std::cout << "Infix: " << infix14 << "\nRPN: " <<
//   // rpn.toRPN(infix14) << "\nAWR: " << "2 3 * 4 5 / + 6 7 ^ 8 % - " <<
//   // std::endl; std::cout << "Infix: " << infix14 << "\nRPN: " <<
//   // rpn.toRPN(infix14) << "\nAWR: " << "2 3 * 4 5 / + 6 7 ^ 8 % - " <<
//   // std::endl;

//   return 0;
// }








// #include "model_calculator.h"
// #include <iostream>
// #include <cassert>

// int main() {
//     using namespace s21;

//     ModelCalculator calc;

//     // Тест 1: Простая арифметика
//     double result = calc.calculate("3 + 4 * 2", 8);
//     assert(fabs(result - 11) < 1e-6);
//     std::cout << "Test 1 passed: 3 + 4 * 2 = " << result << std::endl;

//     // Тест 2: Унарные операторы
//     result = calc.calculate("~5 + 3", 8);
//     assert(fabs(result - (-2)) < 1e-6);
//     std::cout << "Test 2 passed: ~5 + 3 = " << result << std::endl;

//     // Тест 3: Тригонометрические функции
//     result = calc.calculate("sin(0) + cos(0)", 8);
//     assert(fabs(result - 1.0) < 1e-6);
//     std::cout << "Test 3 passed: sin(0) + cos(0) = " << result << std::endl;

//     // Тест 4: Логарифмы
//     result = calc.calculate("log(10) + ln(2.71828)", 8);
//     assert(fabs(result - 2.0) < 1e-6);
//     std::cout << "Test 4 passed: log(10) + ln(2.71828) = " << result << std::endl;

//     // Тест 5: Сложное выражение
//     result = calc.calculate("3 + 4 * 2 / (1 - 5) ^ 2 ^ 3", 8);
//     assert(fabs(result - 3.001953125) < 1e-6);
//     std::cout << "Test 5 passed: 3 + 4 * 2 / (1 - 5) ^ 2 ^ 3 = " << result << std::endl;

//     // Тест 6: Квадратный корень
//     result = calc.calculate("sqrt(x) + sqrt(9)", 9);
//     assert(fabs(result - 6.0) < 1e-6);
//     std::cout << "Test 6 passed: sqrt(4) + sqrt(9) = " << result << std::endl;

//     // Тест 7: Ошибка деления на ноль
//     try {
//         result = calc.calculate("1 / 0", 8);
//     } catch (const std::invalid_argument& e) {
//         std::cout << "Test 7 passed: Division by zero error caught" << std::endl;
//     }

//     // Тест 8: Ошибка логарифма от отрицательного числа
//     try {
//         result = calc.calculate("log(-1)", 8);
//     } catch (const std::domain_error& e) {
//         std::cout << "Test 8 passed: Logarithm of negative number error caught" << std::endl;
//     }

//     // Тест 9: Ошибка квадратного корня из отрицательного числа
//     try {
//         result = calc.calculate("sqrt(-1)", 8);
//     } catch (const std::domain_error& e) {
//         std::cout << "Test 9 passed: Square root of negative number error caught" << std::endl;
//     }

//     // Тест 10: Ошибка некорректного выражения
//     try {
//         result = calc.calculate("3 + 4 *", 8);
//     } catch (const std::invalid_argument& e) {
//         std::cout << "Test 10 passed: Invalid expression error caught" << std::endl;
//     }

//     // Тест 11: Сложное выражение
//     result = calc.calculate("3 + 4 * 2 + (9 + 3 * 2 - 4) * x", 8);
//     assert(fabs(result - 44) < 1e-6);
//     std::cout << "Test 11 passed: 3 + 4 * 2 + (9 + 3 * 2 - 4) * 3 = " << result << std::endl;

//     std::cout << "All tests passed!" << std::endl;
//     return 0;
// }







// #include <iostream>
// #include <iomanip>
// #include "model_credit.h"

// void testCalculateAnnuity() {
//   s21::CreditModel model;
//   s21::CreditModel::Input in = {25000000, 48, 6};
//   double monthly_pay;
//   s21::CreditModel::Output out;
//   std::vector<s21::CreditModel::Payment> payments;

//   model.calculateCredit(s21::CreditModel::ANNUITY, in, monthly_pay, out, payments);

//   std::cout << "Annuity Calculation:" << std::endl;
//   std::cout << std::fixed << std::setprecision(2);
//   std::cout << "Monthly Payment: " << monthly_pay << std::endl;
//   std::cout << "Accrued Interest: " << out.overpayment << std::endl;
//   std::cout << "Total Debt and Interest: " << out.total << std::endl;
// }

// void testCalculateDifferential() {
//   s21::CreditModel model;
//   s21::CreditModel::Input in = {25000000, 48, 6};
//   s21::CreditModel::Output out;
//   std::vector<s21::CreditModel::Payment> payments;
//   double dummy_monthly_pay; // Declare a dummy variable for monthly_pay

//   model.calculateCredit(s21::CreditModel::DIFFERENTIAL, in, dummy_monthly_pay, out, payments);

//   std::cout << "Differential Calculation:" << std::endl;
//   std::cout << std::fixed << std::setprecision(2);
//   for (const auto &payment : payments) {
//     std::cout << "Date: " << payment.date << ", Monthly Payment: " << payment.monthly_pay << ", Remaining Debt: " << payment.total << std::endl;
//   }
//   std::cout << "Total Debt and Interest: " << out.total << std::endl;
//   std::cout << "Accrued Interest: " << out.overpayment << std::endl;
// }

// // void testGetCurrentDateAndTime() {
// //   s21::CreditModel model;
// //   int currentYear, currentMonth;
// //   model.getCurrentDateAndTime(currentYear, currentMonth);

// //   std::cout << "Current Date and Time Test:" << std::endl;
// //   std::cout << "Current Year: " << currentYear << std::endl;
// //   std::cout << "Current Month: " << currentMonth << std::endl;
// // }

// int main() {
//   testCalculateAnnuity();
//   testCalculateDifferential();
//   // testGetCurrentDateAndTime();
//   return 0;
// }


// #include <iostream>
// #include <iomanip>
// #include <vector>
// #include "model_credit.h"



// void testCalcController() {
//   s21::CreditModel model;

//   // Test annuity credit calculation
//   s21::CrInput annuity_in = {4000, 10, 6};
//   double annuity_monthly_pay;
//   s21::CrOutput annuity_out;
//   s21::PaymentVector annuity_payments;

//   model.calculateCredit(s21::ANNUITY, annuity_in, annuity_monthly_pay, annuity_out, annuity_payments);

//   std::cout << "Annuity Calculation:" << std::endl;
//   std::cout << std::fixed << std::setprecision(2);
//   std::cout << "Monthly Payment: " << annuity_monthly_pay << std::endl;
//   std::cout << "Accrued Interest: " << annuity_out.overpayment << std::endl;
//   std::cout << "Total Debt and Interest: " << annuity_out.total << std::endl;

//   // Test differential credit calculation
//   s21::CrInput differential_in = {4000, 10, 6};
//   double differential_monthly_pay;
//   s21::CrOutput differential_out;
//   s21::PaymentVector differential_payments;

//   model.calculateCredit(s21::DIFFERENTIAL, differential_in, differential_monthly_pay, differential_out, differential_payments);

//   std::cout << "Differential Calculation:" << std::endl;
//   std::cout << std::fixed << std::setprecision(2);
//   std::cout << "First Month Payment: " << differential_monthly_pay << std::endl;
//   for (const auto &payment : differential_payments) {
//     std::cout << "Date: " << payment.date << std::endl;
//     std::cout << "Monthly Payment: " << payment.monthly_pay << std::endl;
//     std::cout << "Total: " << payment.interest_pay << std::endl;
//     std::cout << "Total Reminder: " << payment.total_reminder << std::endl;
//     std::cout << "Const Payment: " << payment.const_payment << std::endl;
//     std::cout << "--------------------------------" << std::endl;
//   }
//   std::cout << "Total Debt and Interest: " << differential_out.total << std::endl;
//   std::cout << "Accrued Interest: " << differential_out.overpayment << std::endl;
// }

// int main() {
//   testCalcController();
//   return 0;
// }














#include "model_deposit.h"
#include <iostream>
#include <chrono>
#include <sstream>  // Для std::stringstream
#include <iomanip>  // Для std::put_time

void runTest(const s21::Input& input, const s21::Output& expectedOutput) {
    s21::Output out;
    s21::DepositModel depositModel;
    depositModel.calculateDeposit(input, out);

    // Вывод результатов
    std::cout << "Expected Total Percents: " << expectedOutput.totalPercents << std::endl;
    std::cout << "Actual Total Percents: " << out.totalPercents << std::endl;
    std::cout << "Expected Total Tax: " << expectedOutput.totalTax << std::endl;
    std::cout << "Actual Total Tax: " << out.totalTax << std::endl;
    std::cout << "Expected Remainder Deposit: " << expectedOutput.remainderDeposit << std::endl;
    std::cout << "Actual Remainder Deposit: " << out.remainderDeposit << std::endl;

    // Вывод отчета
    std::cout << "Expected Report:" << std::endl;
    for (const auto& record : expectedOutput.report) {
        auto time_t_date = std::chrono::system_clock::to_time_t(record.date);
        std::tm* timeinfo = std::localtime(&time_t_date);
        std::stringstream ss;
        ss << std::put_time(timeinfo, "%d.%m.%Y");

        std::cout << ss.str() << "\t\t";
        std::cout << std::fixed << std::setprecision(2) << record.percents << " ₽\t\t";
        if (record.addition > 0) {
            std::cout << "+ " << std::fixed << std::setprecision(2) << record.addition << " ₽\t\t";
        } else {
            std::cout << "- " << std::fixed << std::setprecision(2) << -record.addition << " ₽\t\t";
        }
        std::cout << std::fixed << std::setprecision(2) << record.remainder << " ₽" << std::endl;
    }

    std::cout << "Actual Report:" << std::endl;
    for (const auto& record : out.report) {
        auto time_t_date = std::chrono::system_clock::to_time_t(record.date);
        std::tm* timeinfo = std::localtime(&time_t_date);
        std::stringstream ss;
        ss << std::put_time(timeinfo, "%d.%m.%Y");

        std::cout << ss.str() << "\t\t";
        std::cout << std::fixed << std::setprecision(2) << record.percents << " ₽\t\t";
        if (record.addition > 0) {
            std::cout << "+ " << std::fixed << std::setprecision(2) << record.addition << " ₽\t\t";
        } else {
            std::cout << "- " << std::fixed << std::setprecision(2) << -record.addition << " ₽\t\t";
        }
        std::cout << std::fixed << std::setprecision(2) << record.remainder << " ₽" << std::endl;
    }

    std::cout << "Expected Total Percents: " << expectedOutput.totalPercents << " ₽" << std::endl;
    std::cout << "Actual Total Percents: " << out.totalPercents << " ₽" << std::endl;
    std::cout << "Expected Remainder Deposit: " << expectedOutput.remainderDeposit << " ₽" << std::endl;
    std::cout << "Actual Remainder Deposit: " << out.remainderDeposit << " ₽" << std::endl;
}

void testEveryDay() {
    s21::Input input;
    input.deposit = 1000;
    input.rate = 5;
    input.taxRate = 13;
    input.monthsTerm = 12;
    input.capitalisation = true;
    input.period = s21::Period::EveryDay;
    input.now = std::chrono::system_clock::now();
    input.maxNonTaxableIncome = 10000;

    s21::Output expectedOutput;
    expectedOutput.totalPercents = 51.3576;  // Пример значения
    expectedOutput.totalTax = 0.0;  // Пример значения
    expectedOutput.remainderDeposit = 1051.21;  // Пример значения

    runTest(input, expectedOutput);
}

void testEveryMonth() {
    s21::Input input;
    input.deposit = 1000;
    input.rate = 5;
    input.taxRate = 13;
    input.monthsTerm = 12;
    input.capitalisation = true;
    input.period = s21::Period::EveryMonth;
    input.now = std::chrono::system_clock::now();
    input.maxNonTaxableIncome = 10000;

    s21::Output expectedOutput;
    expectedOutput.totalPercents = 51.3576;  // Пример значения
    expectedOutput.totalTax = 0.0;  // Пример значения
    expectedOutput.remainderDeposit = 1051.21;  // Пример значения

    runTest(input, expectedOutput);
}

void testEveryYear() {
    s21::Input input;
    input.deposit = 1000;
    input.rate = 5;
    input.taxRate = 13;
    input.monthsTerm = 12;
    input.capitalisation = true;
    input.period = s21::Period::EveryYear;
    input.now = std::chrono::system_clock::now();
    input.maxNonTaxableIncome = 10000;

    s21::Output expectedOutput;
    expectedOutput.totalPercents = 51.3576;  // Пример значения
    expectedOutput.totalTax = 0.0;  // Пример значения
    expectedOutput.remainderDeposit = 1051.21;  // Пример значения

    runTest(input, expectedOutput);
}

void testAdditions() {
    s21::Input input;
    input.deposit = 1000;
    input.rate = 5;
    input.taxRate = 13;
    input.monthsTerm = 12;
    input.capitalisation = true;
    input.period = s21::Period::EveryMonth;
    input.now = std::chrono::system_clock::now();
    input.maxNonTaxableIncome = 10000;

    input.additions.push_back({input.now + std::chrono::hours(24 * 30), 500});
    input.additions.push_back({input.now + std::chrono::hours(24 * 60), 300});

    s21::Output expectedOutput;
    expectedOutput.totalPercents = 51.3576;  // Пример значения
    expectedOutput.totalTax = 0.0;  // Пример значения
    expectedOutput.remainderDeposit = 1851.21;  // Пример значения

    runTest(input, expectedOutput);
}

void testPayments() {
    s21::Input input;
    input.deposit = 25000000;
    input.rate = 5;
    input.taxRate = 13;
    input.monthsTerm = 48;
    input.capitalisation = true;
    input.period = s21::Period::EveryMonth;
    input.now = std::chrono::system_clock::now();
    input.maxNonTaxableIncome = 10000;

    input.payments.push_back({input.now + std::chrono::hours(24 * 30), 200});
    input.payments.push_back({input.now + std::chrono::hours(24 * 60), 100});

    s21::Output expectedOutput;
    expectedOutput.totalPercents = 5526480.26;  // Пример значения
    expectedOutput.totalTax = 0.0;  // Пример значения
    expectedOutput.remainderDeposit = 751.21;  // Пример значения

    runTest(input, expectedOutput);
}

int main() {
    testEveryDay();
    testEveryMonth();
    testEveryYear();
    testAdditions();
    testPayments();

    return 0;
}
